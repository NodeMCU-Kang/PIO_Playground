#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <espnow.h>

typedef struct packet_info {
    char packet_number[4];
} packet_info;

packet_info processed_packets[32];

uint8_t broadcastAddress[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

void formatMacAddress(const uint8_t *macAddr, char *buffer, int maxLength)
{
  snprintf(buffer, maxLength, "%02x:%02x:%02x:%02x:%02x:%02x", macAddr[0], macAddr[1], macAddr[2], macAddr[3], macAddr[4], macAddr[5]);
}

// callback when data is sent
void sentCallback(const uint8_t *macAddr, uint8_t status)
{
  char macStr[18];
  formatMacAddress(macAddr, macStr, 18);
  Serial.print("Last Packet Sent to: ");
  Serial.println(macStr);
  Serial.print("Last Packet Send Status: ");
  Serial.println(status == 0 ? "Delivery Success" : "Delivery Fail");
}

void receiveCallback(uint8_t *macAddr, uint8_t *data, uint8_t dataLen)
{
  // only allow a maximum of 250 characters in the message + a null terminating byte
  char buffer[251]; // ESP_NOW_MAX_DATA_LEN=250

  strncpy(buffer, (const char *)data, dataLen);
  // make sure we are null terminated
  buffer[dataLen] = 0;
  // format the mac address
  char macStr[18];
  formatMacAddress(macAddr, macStr, 18);
  // debug log the message to the serial port
  Serial.printf("A Received message from: %s - %s\n", macStr, buffer);

  // re-broadcast
  String message = "off";
  esp_now_send(broadcastAddress, (uint8_t *)message.c_str(), message.length());
}

void setup()
{
  // Initialize Serial Monitor
  Serial.begin(115200);
  delay(50);
  Serial.println("ESP07 starts");

  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != 0)
  {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  Serial.println("ESP-NOW init OK");

  // Once ESPNow is successfully Init, we will register for recv CB to
  // get recv packer info
  esp_now_set_self_role(ESP_NOW_ROLE_COMBO);
  esp_now_register_recv_cb(receiveCallback);

  // Register peer
  esp_now_add_peer(broadcastAddress, ESP_NOW_ROLE_SLAVE, 1, NULL, 0);
}

void loop()
{
}
